:py:mod:`eitprocessing.binreader.sequence`
==========================================

.. py:module:: eitprocessing.binreader.sequence

.. autoapi-nested-parse::

   Copyright 2023 Netherlands eScience Center and Erasmus University Medical Center.
   Licensed under the Apache License, version 2.0. See LICENSE for details.

   This file contains methods related to parts of electrical impedance tomographs
   as they are read.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.binreader.sequence.Vendor
   eitprocessing.binreader.sequence.Sequence
   eitprocessing.binreader.sequence.DraegerSequence
   eitprocessing.binreader.sequence.TimpelSequence




.. py:class:: Vendor


   Bases: :py:obj:`strenum.LowercaseStrEnum`

   Enum indicating the vendor (manufacturer) of the EIT device with which the data was
   gathered

   .. py:attribute:: DRAEGER

      

   .. py:attribute:: TIMPEL

      

   .. py:attribute:: SENTEC

      

   .. py:attribute:: DRAGER

      

   .. py:attribute:: DRÃ„GER

      


.. py:class:: Sequence


   Sequence of timepoints containing EIT and/or waveform data

   A Sequence is meant as a representation of a continuous set of data, either EIT frames,
   waveform data, or both. A Sequence could consist of an entire measurement, a section of a
   measurement, a single breath or even a portion of a breath.

   EIT data is contained within Framesets. A Frameset shares the time axis with a Sequence.


   .. py:attribute:: path
      :type: pathlib.Path | str | List[pathlib.Path | str]

      

   .. py:attribute:: time
      :type: numpy.ndarray

      

   .. py:attribute:: n_frames
      :type: int

      

   .. py:attribute:: framerate
      :type: int

      

   .. py:attribute:: framesets
      :type: Dict[str, eitprocessing.binreader.frameset.Frameset]

      

   .. py:attribute:: events
      :type: List[eitprocessing.binreader.event.Event]

      

   .. py:attribute:: timing_errors
      :type: List[eitprocessing.binreader.timing_error.TimingError]

      

   .. py:attribute:: phases
      :type: List[eitprocessing.binreader.phases.PhaseIndicator]

      

   .. py:attribute:: vendor
      :type: Vendor

      

   .. py:attribute:: __getitem__

      

   .. py:attribute:: deepcopy

      

   .. py:method:: __post_init__()


   .. py:method:: __len__() -> int


   .. py:method:: __eq__(other) -> bool

      Return self==value.


   .. py:method:: check_equivalence(a: Sequence, b: Sequence)
      :staticmethod:


   .. py:method:: merge(a: Sequence, b: Sequence) -> Sequence
      :classmethod:


   .. py:method:: from_paths(paths: List[pathlib.Path], vendor: Vendor, framerate: int = None) -> Sequence
      :classmethod:


   .. py:method:: from_path(path: pathlib.Path | str, vendor: Vendor, framerate: int = None, limit_frames: slice | Tuple[int, int] = None) -> Sequence
      :classmethod:

      Load sequence from path

      :param path: path to data file
      :type path: Path | str
      :param vendor: vendor indicating the device used
      :type vendor: Vendor
      :param framerate: framerate at which the data was recorded. Defaults to None.
      :type framerate: int, optional
      :param limit_frames: limit the range of frames to be loaded. Defaults to None.
      :type limit_frames: slice | Tuple[int, int], optional

      :raises NotImplementedError: is raised when there is no loading method for the given vendor.

      :returns: a sequence containing the loaded data
      :rtype: Sequence


   .. py:method:: parse_limit_frames(limit_frames: tuple | slice) -> slice
      :staticmethod:


   .. py:method:: select_by_indices(indices) -> Sequence


   .. py:method:: select_by_time(start=None, end=None, end_inclusive=False) -> Sequence



.. py:class:: DraegerSequence


   Bases: :py:obj:`Sequence`

   Sequence of timepoints containing EIT and/or waveform data

   A Sequence is meant as a representation of a continuous set of data, either EIT frames,
   waveform data, or both. A Sequence could consist of an entire measurement, a section of a
   measurement, a single breath or even a portion of a breath.

   EIT data is contained within Framesets. A Frameset shares the time axis with a Sequence.


   .. py:attribute:: framerate
      :type: int
      :value: 20

      

   .. py:attribute:: vendor
      :type: Vendor

      

   .. py:method:: from_path(path: pathlib.Path | str, vendor: Vendor = Vendor.DRAEGER, framerate: int = None, limit_frames: slice | Tuple[int, int] = None) -> DraegerSequence
      :classmethod:

      Load sequence from path

      :param path: path to data file
      :type path: Path | str
      :param vendor: vendor indicating the device used
      :type vendor: Vendor
      :param framerate: framerate at which the data was recorded. Defaults to None.
      :type framerate: int, optional
      :param limit_frames: limit the range of frames to be loaded. Defaults to None.
      :type limit_frames: slice | Tuple[int, int], optional

      :raises NotImplementedError: is raised when there is no loading method for the given vendor.

      :returns: a sequence containing the loaded data
      :rtype: Sequence


   .. py:method:: read(limit_frames: slice = None, framerate: int = 20) -> None


   .. py:method:: read_frame(reader, index, pixel_values) -> None



.. py:class:: TimpelSequence


   Bases: :py:obj:`Sequence`

   Sequence of timepoints containing EIT and/or waveform data

   A Sequence is meant as a representation of a continuous set of data, either EIT frames,
   waveform data, or both. A Sequence could consist of an entire measurement, a section of a
   measurement, a single breath or even a portion of a breath.

   EIT data is contained within Framesets. A Frameset shares the time axis with a Sequence.


   .. py:attribute:: framerate
      :type: int
      :value: 50

      

   .. py:attribute:: vendor
      :type: Vendor

      

   .. py:method:: from_path(path: pathlib.Path | str, vendor: Vendor = Vendor.TIMPEL, framerate: int = None, limit_frames: slice | Tuple[int, int] = None) -> TimpelSequence
      :classmethod:

      Load sequence from path

      :param path: path to data file
      :type path: Path | str
      :param vendor: vendor indicating the device used
      :type vendor: Vendor
      :param framerate: framerate at which the data was recorded. Defaults to None.
      :type framerate: int, optional
      :param limit_frames: limit the range of frames to be loaded. Defaults to None.
      :type limit_frames: slice | Tuple[int, int], optional

      :raises NotImplementedError: is raised when there is no loading method for the given vendor.

      :returns: a sequence containing the loaded data
      :rtype: Sequence



