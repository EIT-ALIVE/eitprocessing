:py:mod:`eitprocessing.binreader`
=================================

.. py:module:: eitprocessing.binreader

.. autoapi-nested-parse::

   Loading and processing binary EIT data from the Dräger Pulmovista 500



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   event/index.rst
   frameset/index.rst
   phases/index.rst
   reader/index.rst
   sequence/index.rst
   timing_error/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.binreader.Frameset
   eitprocessing.binreader.MaxValue
   eitprocessing.binreader.MinValue
   eitprocessing.binreader.QRSMark
   eitprocessing.binreader.DraegerSequence
   eitprocessing.binreader.Sequence
   eitprocessing.binreader.TimpelSequence
   eitprocessing.binreader.Vendor




.. py:class:: Frameset


   .. py:property:: global_baseline


   .. py:property:: pixel_values_global_offset


   .. py:property:: pixel_baseline


   .. py:property:: pixel_values_individual_offset


   .. py:property:: global_impedance


   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: params
      :type: dict

      

   .. py:attribute:: pixel_values
      :type: numpy.ndarray

      

   .. py:attribute:: waveform_data
      :type: dict

      

   .. py:attribute:: __getitem__

      

   .. py:attribute:: deepcopy

      

   .. py:method:: __len__()


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: select_by_indices(indices)


   .. py:method:: plot_waveforms(waveforms=None)


   .. py:method:: animate(cmap: str = 'plasma', show_progress: bool | str = 'notebook', waveforms: bool | List[str] = False)


   .. py:method:: merge(a, b)
      :classmethod:



.. py:class:: MaxValue


   Bases: :py:obj:`PhaseIndicator`


.. py:class:: MinValue


   Bases: :py:obj:`PhaseIndicator`


.. py:class:: QRSMark


   Bases: :py:obj:`PhaseIndicator`


.. py:class:: DraegerSequence


   Bases: :py:obj:`Sequence`

   Sequence object for DRAEGER data.

   .. py:attribute:: vendor
      :type: Vendor

      

   .. py:method:: _load_data(first_frame: int)

      Load data for DRAEGER files.


   .. py:method:: _read_frame(reader: eitprocessing.binreader.reader.Reader, index: int, pixel_values: numpy.typing.NDArray, previous_marker: int | None) -> None

      Read frame by frame data from DRAEGER files.


   .. py:method:: reshape_frame(frame)
      :staticmethod:

      Convert linear array into 2D (32x32) image-like array.



.. py:class:: Sequence


   Sequence of timepoints containing EIT and/or waveform data

   A Sequence is meant as a representation of a continuous set of data, either EIT frames,
   waveform data, or both. A Sequence could consist of an entire measurement, a section of a
   measurement, a single breath or even a portion of a breath.

   EIT data is contained within Framesets. A Frameset shares the time axis with a Sequence.

   :param path: path(s) to data file.
   :type path: Path | str | List[Path | str]
   :param vendor: vendor indicating the device used.
   :type vendor: Vendor | str
   :param time: list of time label for each data point (can be
                true time or relative time)
   :type time: NDArray[float]
   :param max_frames: number of frames in sequence
   :type max_frames: int
   :param framerate: framerate at which the data was recorded.
                     Defaults to 20 if vendor == DRAEGER
                     Defaults to 50 if vendor == TIMPEL
   :type framerate: int, optional
   :param framesets: dictionary of framesets
   :type framesets: Dict[str, Frameset]
   :param events: list of Event objects in data
   :type events: List[Event]
   :param timing_errors: list of TimingError objects in data
   :type timing_errors: List[TimingError]
   :param phases: list of PhaseIndicator objects in data
   :type phases: List[PhaseIndicator]

   :returns: a sequence containing the l
   :rtype: Sequence

   .. py:attribute:: path
      :type: pathlib.Path | str | List[pathlib.Path | str]

      

   .. py:attribute:: vendor
      :type: Vendor

      

   .. py:attribute:: time
      :type: numpy.typing.NDArray

      

   .. py:attribute:: nframes
      :type: int

      

   .. py:attribute:: framerate
      :type: int

      

   .. py:attribute:: framesets
      :type: Dict[str, eitprocessing.binreader.frameset.Frameset]

      

   .. py:attribute:: events
      :type: List[eitprocessing.binreader.event.Event]

      

   .. py:attribute:: timing_errors
      :type: List[eitprocessing.binreader.timing_error.TimingError]

      

   .. py:attribute:: phases
      :type: List[eitprocessing.binreader.phases.PhaseIndicator]

      

   .. py:attribute:: deepcopy

      

   .. py:method:: __post_init__()


   .. py:method:: __len__() -> int


   .. py:method:: __eq__(other) -> bool

      Return self==value.


   .. py:method:: _set_vendor_class()

      Re-assign Sequence class to child class for selected Vendor.

      :raises NotImplementedError: if the child class for the selected vendor
          has not yet been implemented.
      :raises TypeError: if the `vendor` argument does not correspond to the expected
          vendor for `type(self)`.


   .. py:method:: check_equivalence(a: Sequence, b: Sequence)
      :staticmethod:

      Checks whether content of two Sequence objects is equivalent.


   .. py:method:: __add__(other)


   .. py:method:: merge(a: Sequence, b: Sequence) -> Sequence
      :classmethod:

      Merge two Sequence objects together.


   .. py:method:: from_path(path: pathlib.Path | str | List[pathlib.Path | str], vendor: Vendor | str, framerate: int = None, first_frame: int = 0, max_frames: int | None = None) -> Sequence
      :classmethod:

      Load sequence from path(s)

      :param path: path(s) to data file
      :type path: Path | str | List[Path | str]
      :param vendor: vendor indicating the device used
      :type vendor: Vendor | str
      :param framerate: framerate at which the data was recorded.
                        Default for Draeger: 20
                        Default for Timpel: 50
      :type framerate: int, optional
      :param first_frame: index of first time point of sequence
                          (i.e. NOT the timestamp).
                          Defaults to 0.
      :type first_frame: int, optional
      :param max_frames: maximum number of frames to load.
                         The actual number of frames can be lower than this if this
                         would surpass the final frame.
      :type max_frames: int, optional

      :raises NotImplementedError: is raised when there is no loading method for
      :raises the given vendor.:

      :returns: a sequence containing the loaded data from all files in path
      :rtype: Sequence


   .. py:method:: _load_file(path: pathlib.Path | str, vendor: Vendor | str, framerate: int = None, first_frame: int = 0, max_frames: int | None = None) -> Sequence
      :classmethod:

      Method used by `from_path` that initiates the object and calls
      child method for loading the data.

      See `from_path` method for arguments.


   .. py:method:: _load_data(first_frame: int | None)
      :abstractmethod:

      Needs to be implemented in child class.


   .. py:method:: __getitem__(indices)


   .. py:method:: select_by_time(start: float | int | None = None, end: float | int | None = None, start_inclusive: bool = True, end_inclusive: bool = False) -> Sequence

      Select subset of sequence by the `Sequence.time` information (i.e.
      based on the time stamp).

      :param start: starting time point.
                    Defaults to None.
      :type start: float | int | None, optional
      :param end: ending time point.
                  Defaults to None.
      :type end: float | int | None, optional
      :param start_inclusive: include starting timepoint if
                              `start` is present in `Sequence.time`.
                              Defaults to True.
      :type start_inclusive: bool, optional
      :param end_inclusive: include ending timepoint if
                            `end` is present in `Sequence.time`.
                            Defaults to False.
      :type end_inclusive: bool, optional

      :raises ValueError: if the Sequence.time is not sorted

      :returns: a slice of `self` based on time information given.
      :rtype: Sequence



.. py:class:: TimpelSequence


   Bases: :py:obj:`Sequence`

   Sequence object for TIMPEL data.

   .. py:attribute:: vendor
      :type: Vendor

      

   .. py:method:: _load_data(first_frame: int)

      Load data for TIMPEL files.



.. py:class:: Vendor


   Bases: :py:obj:`strenum.LowercaseStrEnum`

   Enum indicating the vendor (manufacturer) of the EIT device with which the data was
   gathered

   .. py:attribute:: DRAEGER

      

   .. py:attribute:: TIMPEL

      

   .. py:attribute:: SENTEC

      

   .. py:attribute:: DRAGER

      

   .. py:attribute:: DRÄGER

      


