:py:mod:`eitprocessing.eit_data.draeger`
========================================

.. py:module:: eitprocessing.eit_data.draeger


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.eit_data.draeger.DraegerEITData
   eitprocessing.eit_data.draeger._MedibusField




Attributes
~~~~~~~~~~

.. autoapisummary::

   eitprocessing.eit_data.draeger._FRAME_SIZE_BYTES
   eitprocessing.eit_data.draeger._medibus_fields


.. py:data:: _FRAME_SIZE_BYTES
   :value: 4358

   

.. py:class:: DraegerEITData


   Bases: :py:obj:`eitprocessing.eit_data.EITData_`

   Container for EIT data recorded using the DrÃ¤ger Pulmovista PV500.

   .. py:attribute:: vendor
      :type: eitprocessing.eit_data.vendor.Vendor

      

   .. py:attribute:: framerate
      :type: float
      :value: 20

      

   .. py:method:: _from_path(path: pathlib.Path, framerate: float | None = 20, first_frame: int = 0, max_frames: int | None = None, return_non_eit_data: bool = False) -> eitprocessing.data_collection.DataCollection | tuple[eitprocessing.data_collection.DataCollection, eitprocessing.data_collection.DataCollection, eitprocessing.data_collection.DataCollection]
      :classmethod:


   .. py:method:: _convert_medibus_data(medibus_data: numpy.typing.NDArray, time: numpy.typing.NDArray) -> tuple[eitprocessing.data_collection.DataCollection, eitprocessing.data_collection.DataCollection]
      :classmethod:


   .. py:method:: _read_frame(reader: eitprocessing.binreader.reader.Reader, index: int, time: numpy.typing.NDArray, pixel_impedance: numpy.typing.NDArray, medibus_data: numpy.typing.NDArray, events: list, phases: list, previous_marker: int | None) -> int
      :classmethod:

      Read frame by frame data from DRAEGER files.

      This method adds the loaded data to the provided arrays `time` and
      `pixel_impedance` and the provided lists `events` and `phases` when the
      index is non-negative. When the index is negative, no data is saved. In
      any case, the event marker is returned.



.. py:class:: _MedibusField


   Bases: :py:obj:`NamedTuple`

   .. py:attribute:: signal_name
      :type: str

      

   .. py:attribute:: unit
      :type: str

      

   .. py:attribute:: continuous
      :type: bool

      


.. py:data:: _medibus_fields

   

