:py:mod:`eitprocessing.eit_data.draeger`
========================================

.. py:module:: eitprocessing.eit_data.draeger


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.eit_data.draeger.DraegerEITData




Attributes
~~~~~~~~~~

.. autoapisummary::

   eitprocessing.eit_data.draeger.medibus_field
   eitprocessing.eit_data.draeger.medibus_fields


.. py:class:: DraegerEITData


   Bases: :py:obj:`eitprocessing.eit_data.EITData_`

   Container for EIT data recorded using the DrÃ¤ger Pulmovista PV500.

   .. py:attribute:: vendor
      :type: eitprocessing.eit_data.vendor.Vendor

      

   .. py:attribute:: framerate
      :type: float
      :value: 20

      

   .. py:method:: _from_path(path: pathlib.Path, label: str | None = None, framerate: float | None = 20, first_frame: int = 0, max_frames: int | None = None, return_non_eit_data: bool = False) -> typing_extensions.Self | tuple[typing_extensions.Self, eitprocessing.continuous_data.continuous_data_collection.ContinuousDataCollection, eitprocessing.sparse_data.sparse_data_collection.SparseDataCollection]
      :classmethod:


   .. py:method:: _convert_medibus_data(medibus_data: numpy.typing.NDArray, time: numpy.typing.NDArray) -> tuple[eitprocessing.continuous_data.continuous_data_collection.ContinuousDataCollection, eitprocessing.sparse_data.sparse_data_collection.SparseDataCollection]
      :classmethod:


   .. py:method:: _read_frame(reader: eitprocessing.binreader.reader.Reader, index: int, time: numpy.typing.NDArray, pixel_impedance: numpy.typing.NDArray, medibus_data: numpy.typing.NDArray, events: list, phases: list, previous_marker: int | None) -> int
      :classmethod:

      Read frame by frame data from DRAEGER files.

      This method adds the loaded data to the provided arrays `time` and
      `pixel_impedance` and the provided lists `events` and `phases` when the
      index is non-negative. When the index is negative, no data is saved. In
      any case, the event marker is returned.



.. py:data:: medibus_field

   

.. py:data:: medibus_fields

   

