:py:mod:`eitprocessing.eit_data.sentec`
=======================================

.. py:module:: eitprocessing.eit_data.sentec


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.eit_data.sentec.SentecEITData
   eitprocessing.eit_data.sentec.Domain
   eitprocessing.eit_data.sentec.MeasurementDataID
   eitprocessing.eit_data.sentec.ConfigurationDataID




.. py:class:: SentecEITData


   Bases: :py:obj:`eitprocessing.eit_data.EITData_`

   Container for EIT data recorded using the Sentec.

   .. py:attribute:: vendor
      :type: eitprocessing.eit_data.vendor.Vendor

      

   .. py:attribute:: framerate
      :type: float
      :value: 50.2

      

   .. py:method:: _from_path(path: pathlib.Path, label: str | None = None, framerate: float | None = 50.2, first_frame: int = 0, max_frames: int | None = None, return_non_eit_data: bool = False) -> typing_extensions.Self | tuple[typing_extensions.Self, eitprocessing.continuous_data.continuous_data_collection.ContinuousDataCollection, eitprocessing.sparse_data.sparse_data_collection.SparseDataCollection]
      :classmethod:


   .. py:method:: _read_frame(fh: BinaryIO, version: int, index: int, payload_size: int, reader: eitprocessing.binreader.reader.Reader, first_frame: int = 0) -> numpy.typing.NDArray | None
      :classmethod:

              Read a single frame in the file. The current position of the file has to be already
              set to the point where the image should be read (data_id 5).
              Args:
                  fh: opened file object
                  version: version of the Sentec file
                  index: current number of read frames
                  payload_size: size of the payload of the data to be read.
                  reader: bites reader object
                  first_frame: index of first time point of sequence

      Returns: A 32 x 32 matrix, containing the pixels values.




.. py:class:: Domain


   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: MEASUREMENT
      :value: 16

      

   .. py:attribute:: CONFIGURATION
      :value: 64

      


.. py:class:: MeasurementDataID


   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: TIMESTAMP
      :value: 0

      

   .. py:attribute:: ZERO_REF_IMAGE
      :value: 5

      


.. py:class:: ConfigurationDataID


   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: FRAMERATE
      :value: 1

      


