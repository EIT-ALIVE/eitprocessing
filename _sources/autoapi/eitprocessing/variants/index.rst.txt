:py:mod:`eitprocessing.variants`
================================

.. py:module:: eitprocessing.variants


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   variant_collection/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.variants.Equivalence
   eitprocessing.variants.Variant




.. py:class:: Equivalence


   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __eq__(other: typing_extensions.Self)

      Return self==value.


   .. py:method:: _array_safe_eq(a, b) -> bool
      :staticmethod:

      Check if a and b are equal, even if they are numpy arrays containing nans.


   .. py:method:: isequivalent(other: typing_extensions.Self, raise_: bool = False) -> bool

      Test whether the data structure between two objects are equivalent.

      Equivalence, in this case means that objects are compatible e.g. to be
      merged. Data content can vary, but e.g. the category of data (e.g.
      airway pressure, flow, tidal volume) and unit, etc., must match.


      :param other: object that will be compared to self.
      :param raise_: sets this method's behavior in case of non-equivalence. If
                     True, an `EquivalenceError` is raised, otherwise `False` is
                     returned.

      :raises EquivalenceError: if `raise_ == True` and the objects are not
      :raises equivalent.:

      :returns: bool describing result of equivalence comparison.



.. py:class:: Variant


   Bases: :py:obj:`eitprocessing.mixins.equality.Equivalence`, :py:obj:`abc.ABC`

   Contains a single variant of a dataset.

   A variant of a dataset is defined as either the raw data, or an edited
   version of that raw data. For example, EIT data can contain a "raw"
   versions and a "filtered" version. Both variants share the same time axis.

   The actual data of a variant is contained in a variable that must be set by
   a subclass inheriting from this class.

   Attributes:
   - label (str): a short descriptor for the variant, that is used to access
     the variant
   - description (str): a longer description of the variant
   - params (dict): contains information on how to reproduce the variant, e.g.
     which filters and filters settigs were used

   .. py:attribute:: label
      :type: str

      

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: params
      :type: dict

      

   .. py:method:: concatenate(a: typing_extensions.Self, b: typing_extensions.Self) -> typing_extensions.Self
      :classmethod:
      :abstractmethod:

      Concatenates two variants.

      Concatenating two variants results in a single variant with the
      combined length of both variants.

      To merge more than two variants, use
      `functools.reduce(Variant.concatenate, list_of_variants)`.

      Args:
      - a (Variant)
      - b (Variant)

      Raises:
      - EquivalenceError if a and b are not equivalent and can't be merged



