:py:mod:`eitprocessing.variants.variant_collection`
===================================================

.. py:module:: eitprocessing.variants.variant_collection


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.variants.variant_collection.VariantCollection




Attributes
~~~~~~~~~~

.. autoapisummary::

   eitprocessing.variants.variant_collection.V


.. py:data:: V

   

.. py:class:: VariantCollection(variant_type: type[V], *args, **kwargs)


   Bases: :py:obj:`dict`, :py:obj:`eitprocessing.mixins.equality.Equivalence`, :py:obj:`Generic`\ [\ :py:obj:`V`\ ]

   A collection of variants of a single type.

   A VariantCollection is a dictionary with some added features.

   A VariantCollection can only contain variants (of a certain type). When
   initializing VariantCollection a subclass of Variant (or Variant itself to
   allow diverse types )must be passed as the first argument (`variant_type`),
   limiting the type of variant that is allowed to be added to the collection.
   During initialization, other arguments can be passed as if initializing a
   normal dictionary.

   When adding a variant, the key of the item in the dictionary must equal the
   label of the variant. The method `add()` can be used instead, which
   automatically sets the variant label as the key.

   Thirdly, when setting a variant with a label that already exists, the
   default behaviour is to raise an exception. This prevents overwriting
   existing variants. This behaviour can be overridden using `add(variant,
   overwrite=True)`.


   The `add()` method

   Examples:
   ```
   >>> variant_a = EITDataVariant(label="raw", ...)
   >>> vc = VariantCollection(EITDataVariant, raw=variant_a)
   >>> variant_b = EITDataVariant(label="filtered", ...)
   >>> vc.add(variant_b)  # equals vc["filtered"] = variant
   ```

   ```
   >>> vc = VariantCollection(EITDataVariant)
   >>> variant_c = SomeOtherVariant(label="offset", ...)
   >>> vc.add(variant_c)  # raises InvalidVariantType() exception
   ```


   .. py:attribute:: variant_type
      :type: type[V]

      

   .. py:method:: __eq__(other: typing_extensions.Self)

      Return self==value.


   .. py:method:: __setitem__(__key: str, __value: V) -> None

      Set self[key] to value.


   .. py:method:: add(*variant: V, overwrite: bool = False) -> None

      Add one or multiple variants to the dictionary.

      This method automatically sets the key of the item to the label of the
      variant. By default, overwriting variants with the same label is
      prevented. Trying to do so will result in a DuplicateVariantLabel
      exception being raised. Set `overwrite` to `True` to allow overwriting.

      Args:
      - variant (Variant): the variant to be added. Multiple variants can be
      added at once.

      Raises:
      - DuplicateVariantLabel if one attempts to add a variant with a label
      that already exists as key.


   .. py:method:: _check_variant(variant: V, key=None, overwrite: bool = False) -> None


   .. py:method:: concatenate(a: typing_extensions.Self, b: typing_extensions.Self) -> typing_extensions.Self
      :classmethod:



.. py:exception:: InvalidVariantType


   Bases: :py:obj:`TypeError`

   Raised when a variant that does not match the variant type is added.


.. py:exception:: DuplicateVariantLabel


   Bases: :py:obj:`KeyError`

   Raised when a variant with the same name already exists in the collection.


