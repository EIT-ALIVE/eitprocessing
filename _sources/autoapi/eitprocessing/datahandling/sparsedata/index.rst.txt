eitprocessing.datahandling.sparsedata
=====================================

.. py:module:: eitprocessing.datahandling.sparsedata


Attributes
----------

.. autoapisummary::

   eitprocessing.datahandling.sparsedata.T


Classes
-------

.. autoapisummary::

   eitprocessing.datahandling.sparsedata.SparseData


Module Contents
---------------

.. py:data:: T

.. py:class:: SparseData

   Bases: :py:obj:`eitprocessing.datahandling.mixins.equality.Equivalence`, :py:obj:`eitprocessing.datahandling.mixins.slicing.SelectByTime`


   Container for data related to individual time points.

   Sparse data is data for which the time points are not necessarily evenly spaced. Data can consist time-value pairs
   or only time points.


   Sparse data differs from interval data in that each data points is associated with a single time point rather than a
   time range.

   Examples are data points at end of inspiration/end of expiration (e.g. tidal volume, end-expiratoy lung impedance)
   or detected time points (e.g. QRS complexes).

   :param label: Computer readable name.
   :param name: Human readable name.
   :param unit: Unit of the data, if applicable.
   :param category: Category the data falls into, e.g. 'detected r peak'.
   :param description: Human readable extended description of the data.
   :param parameters: Parameters used to derive the data.
   :param derived_from: Traceback of intermediates from which the current data was derived.
   :param values: List or array of values. These van be numeric data, text or Python objects.


   .. py:attribute:: label
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: unit
      :type:  str | None


   .. py:attribute:: category
      :type:  str


   .. py:attribute:: time
      :type:  numpy.ndarray


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: parameters
      :type:  dict[str, Any]


   .. py:attribute:: derived_from
      :type:  list[Any]


   .. py:attribute:: values
      :type:  Any | None
      :value: None



   .. py:method:: __repr__() -> str

      Return repr(self).



   .. py:method:: __len__() -> int


   .. py:property:: has_values
      :type: bool

      True if the SparseData has values, False otherwise.


   .. py:method:: _sliced_copy(start_index: int, end_index: int, newlabel: str) -> typing_extensions.Self

      Slicing method that must be implemented by all subclasses.

      Must return a copy of self object with all attached data within selected
      indices.



   .. py:method:: __add__(other: typing_extensions.Self) -> typing_extensions.Self


   .. py:method:: concatenate(other: T, newlabel: str | None = None) -> T


