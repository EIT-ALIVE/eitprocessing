eitprocessing.datahandling.loading.timpel
=========================================

.. py:module:: eitprocessing.datahandling.loading.timpel


Attributes
----------

.. autoapisummary::

   eitprocessing.datahandling.loading.timpel._COLUMN_WIDTH
   eitprocessing.datahandling.loading.timpel._NAN_VALUE
   eitprocessing.datahandling.loading.timpel.TIMPEL_FRAMERATE
   eitprocessing.datahandling.loading.timpel.load_timpel_data


Classes
-------

.. autoapisummary::

   eitprocessing.datahandling.loading.timpel.Breath
   eitprocessing.datahandling.loading.timpel.ContinuousData
   eitprocessing.datahandling.loading.timpel.DataCollection
   eitprocessing.datahandling.loading.timpel.EITData
   eitprocessing.datahandling.loading.timpel.Vendor
   eitprocessing.datahandling.loading.timpel.IntervalData
   eitprocessing.datahandling.loading.timpel.SparseData


Functions
---------

.. autoapisummary::

   eitprocessing.datahandling.loading.timpel.load_eit_data
   eitprocessing.datahandling.loading.timpel.load_from_single_path
   eitprocessing.datahandling.loading.timpel._make_breaths


Module Contents
---------------

.. py:class:: Breath

   Bases: :py:obj:`NamedTuple`


   Represents a breath with a start, middle and end index.


   .. py:attribute:: start_time
      :type:  float


   .. py:attribute:: middle_time
      :type:  float


   .. py:attribute:: end_time
      :type:  float


.. py:class:: ContinuousData

   Bases: :py:obj:`eitprocessing.datahandling.mixins.equality.Equivalence`, :py:obj:`eitprocessing.datahandling.mixins.slicing.SelectByTime`


   Data class for (non-EIT) data with a continuous time axis.

   :param label: Computer readable naming of the instance.
   :param name: Human readable naming of the instance.
   :param unit: Unit for the data.
   :param category: Category the data falls into, e.g. 'airway pressure'.
   :param description: Human readable extended description of the data.
   :param parameters: Parameters used to derive this data.
   :param derived_from: Traceback of intermediates from which the current data was derived.
   :param values: Data points.


   .. py:attribute:: label
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: unit
      :type:  str


   .. py:attribute:: category
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: parameters
      :type:  dict[str, typing_extensions.Any]


   .. py:attribute:: derived_from
      :type:  typing_extensions.Any | list[typing_extensions.Any]


   .. py:attribute:: time
      :type:  numpy.ndarray


   .. py:attribute:: values
      :type:  numpy.ndarray


   .. py:method:: __post_init__() -> None


   .. py:method:: __setattr__(attr: str, value: typing_extensions.Any)

      Implement setattr(self, name, value).



   .. py:method:: copy(label: str, *, name: str | None = None, unit: str | None = None, description: str | None = None, parameters: dict | None = None) -> typing_extensions.Self

      Create a copy.

      Whenever data is altered, it should probably be copied first. The alterations should then be made in the copy.



   .. py:method:: __add__(other: T) -> T


   .. py:method:: concatenate(other: T, newlabel: str | None = None) -> T


   .. py:method:: derive(label: str, function: collections.abc.Callable, func_args: dict, **kwargs) -> typing_extensions.Self

      Create a copy deriving data from values attribute.

      :param label: New label for the derived object.
      :param function: Function that takes the values and returns the derived values.
      :param func_args: Arguments to pass to function.
      :param \*\*kwargs: New values for attributes of

      Example:
      ```
      def convert_data(x, add=None, subtract=None, multiply=None, divide=None):
          if add:
              x += add
          if subtract:
              x -= subtract
          if multiply:
              x *= multiply
          if divide:
              x /= divide
          return x


      data = ContinuousData(
          name="Lung volume (in mL)", label="volume_mL", unit="mL", category="volume", values=some_loaded_data
      )
      derived = data.derive("volume_L", convert_data, {"divide": 1000}, name="Lung volume (in L)", unit="L")
      ```



   .. py:method:: lock(*attr: str) -> None

      Lock attributes, essentially rendering them read-only.

      Locked attributes cannot be overwritten. Attributes can be unlocked using `unlock()`.

      :param \*attr: any number of attributes can be passed here, all of which will be locked. Defaults to "values".

      .. rubric:: Examples

      >>> # lock the `values` attribute of `data`
      >>> data.lock()
      >>> data.values = [1, 2, 3] # will result in an AttributeError
      >>> data.values[0] = 1      # will result in a RuntimeError



   .. py:method:: unlock(*attr: str) -> None

      Unlock attributes, rendering them editable.

      Locked attributes cannot be overwritten, but can be unlocked with this function to make them editable.

      :param \*attr: any number of attributes can be passed here, all of which will be unlocked. Defaults to "values".

      .. rubric:: Examples

      >>> # lock the `values` attribute of `data`
      >>> data.lock()
      >>> data.values = [1, 2, 3] # will result in an AttributeError
      >>> data.values[0] = 1      # will result in a RuntimeError
      >>> data.unlock()
      >>> data.values = [1, 2, 3]
      >>> print(data.values)
      [1,2,3]
      >>> data.values[0] = 1      # will result in a RuntimeError
      >>> print(data.values)
      1



   .. py:property:: locked
      :type: bool

      Return whether the values attribute is locked.

      See lock().


   .. py:property:: loaded
      :type: bool

      Return whether the data was loaded from disk, or derived from elsewhere.


   .. py:method:: __len__()


   .. py:method:: _sliced_copy(start_index: int, end_index: int, newlabel: str) -> typing_extensions.Self

      Slicing method that must be implemented by all subclasses.

      Must return a copy of self object with all attached data within selected
      indices.



.. py:class:: DataCollection(data_type: type[V], *args, **kwargs)

   Bases: :py:obj:`eitprocessing.datahandling.mixins.equality.Equivalence`, :py:obj:`collections.UserDict`, :py:obj:`eitprocessing.datahandling.mixins.slicing.HasTimeIndexer`, :py:obj:`Generic`\ [\ :py:obj:`V`\ ]


   A collection of a single type of data with unique labels.

   This collection functions as a dictionary in most part. When initializing, a data type has to be passed. EITData,
   ContinuousData or SparseData is expected as the data type. Other types are allowed, but not supported. The objects
   added to the collection need to have a `label` attribute and a `concatenate()` method.

   When adding an item to the collection, the type of the value has to match the data type of the collection.
   Furthermore, the key has to match the attribute 'label' attached to the value.

   The convenience method `add()` adds an item by setting the key to `value.label`.

   :param data_type: the type of data stored in this collection. Expected to be one of EITData, ContinuousData or
   :param SparseData.:


   .. py:attribute:: data_type
      :type:  type


   .. py:method:: __setitem__(__key: str, __value: V) -> None


   .. py:method:: add(*item: V, overwrite: bool = False) -> None

      Add one or multiple item(s) to the collection.



   .. py:method:: _check_item(item: V, key: str | None = None, overwrite: bool = False) -> None

      Check whether the item can be added to the collection.

      In order to be added to the collection, the data type of the item has to match the data type set in the
      collection. They key that is used to store the item in the collection has to match the label of the item itself.
      By default, existing keys can not be overridden.

      :param item: Object to be added to the collection.
      :param key: Key of the item. Has to match `item.label`.
      :param overwrite: If False, the key can not already exist in the collection. Set to True to allow overwriting an
      :param existing object in the collection.:

      :raises TypeError: If the type of the item does not match the type set in the collection.
      :raises KeyError: If the key does not match `item.label`, or when the key already exists in de collection and
      :raises overwrite is set to False.:



   .. py:method:: get_loaded_data() -> dict[str, V]

      Return all data that was directly loaded from disk.



   .. py:method:: get_data_derived_from(obj: V) -> dict[str, V]

      Return all data that was derived from a specific source.



   .. py:method:: get_derived_data() -> dict[str, V]

      Return all data that was derived from any source.



   .. py:method:: concatenate(other: typing_extensions.Self) -> typing_extensions.Self

      Concatenate this collection with an equivalent collection.

      Each item of self of concatenated with the item of other with the same key.



   .. py:method:: select_by_time(start_time: float | None, end_time: float | None, start_inclusive: bool = True, end_inclusive: bool = False) -> DataCollection

      Return a DataCollection containing sliced copies of the items.



.. py:class:: EITData

   Bases: :py:obj:`eitprocessing.datahandling.mixins.slicing.SelectByTime`, :py:obj:`eitprocessing.datahandling.mixins.equality.Equivalence`


   Container for EIT impedance data.

   This class holds the pixel impedance from an EIT measurement, as well as metadata describing the measurement. The
   class is meant to hold data from (part of) a singular continuous measurement.

   This class can't be initialized directly. Instead, use `load_eit_data(<path>, vendor=<vendor>)` to load data from
   disk.

   :param path: the path of list of paths of the source from which data was derived.
   :param nframes: number of frames
   :param time:

   Several convenience methods are supplied for calculating global impedance, calculating or removing baselines, etc.


   .. py:attribute:: path
      :type:  str | pathlib.Path | list[pathlib.Path | str]


   .. py:attribute:: nframes
      :type:  int


   .. py:attribute:: time
      :type:  numpy.ndarray


   .. py:attribute:: framerate
      :type:  float


   .. py:attribute:: vendor
      :type:  Vendor


   .. py:attribute:: label
      :type:  str | None


   .. py:attribute:: name
      :type:  str | None


   .. py:attribute:: pixel_impedance
      :type:  numpy.ndarray


   .. py:method:: __post_init__()


   .. py:method:: parse_path(path: str | pathlib.Path | list[str | pathlib.Path], ensure_list: Literal[True]) -> list[pathlib.Path]
                  parse_path(path: str | pathlib.Path | list[str | pathlib.Path], ensure_list: Literal[False]) -> pathlib.Path
      :staticmethod:


      Return the path or paths as a list.

      The path of any EITData object can be a single str/Path or a list of str/Path objects. This method returns a
      list of Path objects given either a str/Path or list of str/Paths.



   .. py:method:: __add__(other: T) -> T


   .. py:method:: concatenate(other: T, newlabel: str | None = None) -> T


   .. py:method:: _sliced_copy(start_index: int, end_index: int, newlabel: str) -> typing_extensions.Self

      Slicing method that must be implemented by all subclasses.

      Must return a copy of self object with all attached data within selected
      indices.



   .. py:method:: __len__()


   .. py:method:: calculate_global_impedance() -> numpy.ndarray

      Return the global impedance, i.e. the sum of all included pixels at each frame.



.. py:class:: Vendor

   Bases: :py:obj:`strenum.LowercaseStrEnum`


   Enum indicating the vendor (manufacturer) of the source EIT device.


   .. py:attribute:: DRAEGER


   .. py:attribute:: TIMPEL


   .. py:attribute:: SENTEC


   .. py:attribute:: DRAGER


   .. py:attribute:: DRÄGER


.. py:class:: IntervalData

   Bases: :py:obj:`eitprocessing.datahandling.mixins.equality.Equivalence`, :py:obj:`eitprocessing.datahandling.mixins.slicing.SelectByIndex`, :py:obj:`eitprocessing.datahandling.mixins.slicing.HasTimeIndexer`


   Container for interval data existing over a period of time.

   Interval data is data that constists for a given time interval. Examples are a ventilator setting (e.g.
   end-expiratory pressure), the position of a patient, a maneuver (end-expiratory hold) being performed, detected
   periods in the data, etc.

   Interval data consists of a number of time range-value pairs or time ranges without associated values. E.g. interval
   data with the label "expiratory_breath_hold" only requires time ranges for when expiratory breath holds were
   performed. Other interval data, e.g. "set_driving_pressure" do have associated values.

   Interval data can be selected by time through the `select_by_time(start_time, end_time)` method. Alternatively,
   `t[start_time:end_time]` can be used. When the start or end time overlaps with a time range, the time range and its
   associated value are included in the selection if `partial_inclusion` is `True`, but ignored if `partial_inclusion`
   is `False`. If the time range is partially included, the start and end times are trimmed to the start and end time
   of the selection.

   A potential use case where `partial_inclusion` should be set to `True` is "set_driving_pressure": you might want to
   keep the driving pressure that was set before the start of the selectioon. A use case where `partial_inclusion`
   should be set to `False` is "detected_breaths": you might want to ignore partial breaths that started before or
   ended after the selected period.

   Note that when selecting by time, the end time is included in the selection.

   :param label: a computer-readable name
   :param name: a human-readable name
   :param unit: the unit associated with the data
   :param category: the category of data
   :param time_ranges: a list of time ranges (tuples containing a start time and end time)
   :param values: an optional list of values with the same length as time_ranges
   :param parameters: parameters used to derive the data
   :param derived_from: list of data sets this data was derived from
   :param description: extended human readible description of the data
   :param partial_inclusion: whether to include a trimmed version of a time range when selecting data


   .. py:attribute:: label
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: unit
      :type:  str | None


   .. py:attribute:: category
      :type:  str


   .. py:attribute:: intervals
      :type:  list[Interval | tuple[float, float]]


   .. py:attribute:: values
      :type:  list[Any] | None
      :value: None



   .. py:attribute:: parameters
      :type:  dict[str, Any]


   .. py:attribute:: derived_from
      :type:  list[Any]


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: default_partial_inclusion
      :type:  bool
      :value: False



   .. py:method:: __post_init__() -> None


   .. py:method:: __repr__() -> str

      Return repr(self).



   .. py:method:: __len__() -> int


   .. py:property:: has_values
      :type: bool

      True if the IntervalData has values, False otherwise.


   .. py:method:: _sliced_copy(start_index: int, end_index: int, newlabel: str) -> typing_extensions.Self

      Slicing method that must be implemented by all subclasses.

      Must return a copy of self object with all attached data within selected
      indices.



   .. py:method:: select_by_time(start_time: float | None = None, end_time: float | None = None, partial_inclusion: bool | None = None, newlabel: str | None = None) -> typing_extensions.Self

      Return only period data that overlaps (partly) with start and end time.

      Other types of data (e.g. ContinuousData and SparseData) support the start_inclusive and end_inclusive
      arguments. PeriodData does not. That means that selection by time of PeriodData probably works slightly
      different than other types of selecting/slicing data.



   .. py:method:: _keep_overlapping(item: tuple[Interval, Any], selection_start: float, selection_end: float) -> bool
      :staticmethod:


      Helper function for filtering overlapping interval-value pairs.



   .. py:method:: _keep_fully_overlapping(item: tuple[Interval, Any], selection_start: float, selection_end: float) -> bool
      :staticmethod:


      Helper function for filtering fully overlapping interval-value pairs.



   .. py:method:: _replace_start_end_time(interval: Interval, selection_start: float, selection_end: float) -> Interval
      :staticmethod:


      Helper function to replace start and end time after filtering interval-value pairs.



   .. py:method:: concatenate(other: T, newlabel: str | None = None) -> T


.. py:function:: load_eit_data(path: str | pathlib.Path | list[str | pathlib.Path], vendor: eitprocessing.datahandling.eitdata.Vendor | str, label: str | None = None, name: str | None = None, description: str = '', framerate: float | None = None, first_frame: int = 0, max_frames: int | None = None) -> eitprocessing.datahandling.sequence.Sequence

   Load EIT data from path(s).

   :param path: relative or absolute path(s) to data file.
   :param vendor: vendor indicating the device used.
                  Note: for load functions of specific vendors (e.g. `load_draeger_data`), this argument is defaulted to the
                  correct vendor.
   :param label: short description of sequence for computer interpretation.
                 Defaults to "Sequence_<unique_id>".
   :param name: short description of sequence for human interpretation.
                Defaults to the same value as label.
   :param description: long description of sequence for human interpretation.
   :param framerate: framerate at which the data was recorded.
                     Default for Draeger: 20
                     Default for Timpel: 50
                     Default for Sentec: 50.2
   :param first_frame: index of first frame to load.
                       Defaults to 0.
   :param max_frames: maximum number of frames to load.
                      The actual number of frames can be lower than this if this
                      would surpass the final frame.

   :raises NotImplementedError: is raised when there is no loading method for
   :raises the given vendor.:

   :returns: a Sequence with the given label, name and description, containing the loaded data.
   :rtype: Sequence

   Example:
   ```
   sequence = load_data(["path/to/file1", "path/to/file2"], vendor="sentec", label="initial_measurement")
   pixel_impedance = sequence.eit_data["raw"].pixel_impedance
   ```


.. py:class:: SparseData

   Bases: :py:obj:`eitprocessing.datahandling.mixins.equality.Equivalence`, :py:obj:`eitprocessing.datahandling.mixins.slicing.SelectByTime`


   Container for data occuring at unpredictable time points.

   In sparse data the time points are not necessarily evenly spaced. Data can consist time-value pairs or only time
   points. Values generally are numeric values in arrays, but can also be lists of different types of object.

   Sparse data differs from IntervalData in that each data points is associated with a single time point rather than a
   time range.

   Examples are data points at end of inspiration/end of expiration (e.g. tidal volume, end-expiratoy lung impedance)
   or detected time points (e.g. QRS complexes).



   :param label: Computer readable name.
   :param name: Human readable name.
   :param unit: Unit of the data, if applicable.
   :param category: Category the data falls into, e.g. 'airway pressure'.
   :param description: Human readible extended description of the data.
   :param parameters: Parameters used to derive the data.
   :param derived_from: Traceback of intermediates from which the current data was derived.
   :param values: List or array of values. These van be numeric data, text or Python objects.


   .. py:attribute:: label
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: unit
      :type:  str | None


   .. py:attribute:: category
      :type:  str


   .. py:attribute:: time
      :type:  numpy.ndarray


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: parameters
      :type:  dict[str, Any]


   .. py:attribute:: derived_from
      :type:  list[Any]


   .. py:attribute:: values
      :type:  Any | None
      :value: None



   .. py:method:: __repr__() -> str

      Return repr(self).



   .. py:method:: __len__() -> int


   .. py:property:: has_values
      :type: bool

      True if the SparseData has values, False otherwise.


   .. py:method:: _sliced_copy(start_index: int, end_index: int, newlabel: str) -> typing_extensions.Self

      Slicing method that must be implemented by all subclasses.

      Must return a copy of self object with all attached data within selected
      indices.



   .. py:method:: concatenate(other: T, newlabel: str | None = None) -> T


.. py:data:: _COLUMN_WIDTH
   :value: 1030


.. py:data:: _NAN_VALUE

.. py:data:: TIMPEL_FRAMERATE
   :value: 50


.. py:data:: load_timpel_data

.. py:function:: load_from_single_path(path: pathlib.Path, framerate: float | None = 20, first_frame: int = 0, max_frames: int | None = None) -> dict[str, eitprocessing.datahandling.datacollection.DataCollection]

   Load Timpel EIT data from path.


.. py:function:: _make_breaths(time: numpy.ndarray, min_indices: numpy.ndarray, max_indices: numpy.ndarray, gi: numpy.ndarray) -> tuple[list[tuple[float, float]], list[eitprocessing.datahandling.breath.Breath]]

