:py:mod:`eitprocessing.datahandling.mixins.slicing`
===================================================

.. py:module:: eitprocessing.datahandling.mixins.slicing


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.datahandling.mixins.slicing.SelectByIndex
   eitprocessing.datahandling.mixins.slicing.HasTimeIndexer
   eitprocessing.datahandling.mixins.slicing.SelectByTime
   eitprocessing.datahandling.mixins.slicing.TimeIndexer




.. py:class:: SelectByIndex


   Bases: :py:obj:`abc.ABC`

   Adds slicing functionality to subclass by implementing `__getitem__`.

   Subclasses must implement a `_sliced_copy` function that defines what should
   happen when the object is sliced. This class ensures that when calling a
   slice between square brackets (as e.g. done for lists) then return the
   expected sliced object.

   .. py:attribute:: label
      :type: str

      

   .. py:method:: __getitem__(key: slice | int)


   .. py:method:: select_by_index(start: int | None = None, end: int | None = None, newlabel: str | None = None) -> typing_extensions.Self

      De facto implementation of the `__getitem__ function.

      This function can also be called directly to add a label to the sliced
      object. Otherwise a default label describing the slice and original
      object is attached.


   .. py:method:: _sliced_copy(start_index: int, end_index: int, newlabel: str) -> typing_extensions.Self
      :abstractmethod:

      Slicing method that must be implemented by all subclasses.

      Must return a copy of self object with all attached data within selected
      indices.



.. py:class:: HasTimeIndexer


   Gives access to a TimeIndexer object that can be used to slice by time.

   .. py:property:: t
      :type: TimeIndexer

      Slicing an object using the time axis instead of indices.

      Example:
      ```
      >>> sequence = load_eit_data(<path>, ...)
      >>> time_slice1 = sequence.t[tp_start:tp_end]
      >>> time_slice2 = sequence.select_by_time(tp_start, tp_end)
      >>> time_slice1 == time_slice2
      True
      ```


.. py:class:: SelectByTime


   Bases: :py:obj:`SelectByIndex`, :py:obj:`HasTimeIndexer`

   Adds methods for slicing by time rather than index.

   .. py:method:: select_by_time(start_time: float | None = None, end_time: float | None = None, n_before: int = 0, n_after: int = 0, label: str | None = None) -> typing_extensions.Self
      :abstractmethod:

      Slice object according to time stamps (i.e. its value, not its index).

      The sliced object must contain a time axis.

      :param start_time: Start time of new object (inclusive). Unless it is lower than the first timepoint, `start_time`
                         will be present in the time axis of the sliced object. This means that the first timepoint of the sliced
                         object will be equal to `start_time` if it exists on the unsliced object, and otherwise the last
                         timepoint preceding `start_time`.
                         Defaults to None, which is the first time point of the object.
      :param end_time: End time of new object (exclusive). The final timepoint of the sliced object will be the last
                       timepoint preceding `end_time`, irrespective of whether it exists in the unsliced object.
      :param n_before: Additional time points to include (or exclude if negative) before first time point defined above.
      :param n_after: Additional time points to include (or exclude if negative) after last time point defined above.

      :raises TypeError: if `self` does not contain a `time` attribute.
      :raises ValueError: if time stamps are not sorted.

      :returns: Slice of self.



.. py:class:: TimeIndexer


   Helper class for slicing an object using the time axis instead of indices.

   Example:
   ```
   >>> sequence = load_eit_data(<path>, ...)
   >>> time_slice1 = sequence.t[tp_start:tp_end]
   >>> time_slice2 = sequence.select_by_time(tp_start, tp_end)
   >>> time_slice1 == time_slice2
   True
   ```

   .. py:attribute:: obj
      :type: SelectByTime

      

   .. py:method:: __getitem__(key: slice | float)



