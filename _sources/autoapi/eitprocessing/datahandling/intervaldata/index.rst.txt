eitprocessing.datahandling.intervaldata
=======================================

.. py:module:: eitprocessing.datahandling.intervaldata


Attributes
----------

.. autoapisummary::

   eitprocessing.datahandling.intervaldata.T


Classes
-------

.. autoapisummary::

   eitprocessing.datahandling.intervaldata.Interval
   eitprocessing.datahandling.intervaldata.IntervalData


Module Contents
---------------

.. py:data:: T

.. py:class:: Interval

   Bases: :py:obj:`NamedTuple`


   A tuple containing the start time and end time of an interval.


   .. py:attribute:: start_time
      :type:  float


   .. py:attribute:: end_time
      :type:  float


.. py:class:: IntervalData

   Bases: :py:obj:`eitprocessing.datahandling.mixins.equality.Equivalence`, :py:obj:`eitprocessing.datahandling.mixins.slicing.SelectByIndex`, :py:obj:`eitprocessing.datahandling.mixins.slicing.HasTimeIndexer`


   Container for interval data existing over a period of time.

   Interval data is data that consists for a given time interval. Examples are a ventilator setting (e.g.
   end-expiratory pressure), the position of a patient, a maneuver (end-expiratory hold) being performed, detected
   periods in the data, etc.

   Interval data consists of a number of intervals that may or may not have values associated with them.

   Examples of IntervalData with associated values are certain ventilator settings (e.g. end-expiratory pressure) and
   the position of a patient. Examples of IntervalData without associated values are indicators of maneouvres (e.g. a
   breath hold) or detected occurences (e.g. a breath).


   Interval data can be selected by time through the `select_by_time(start_time, end_time)` method. Alternatively,
   `t[start_time:end_time]` can be used.

   :param label: Computer readable label identifying this dataset.
   :param name: Human readable name for the data.
   :param unit: The unit of the data, if applicable.
   :param category: Category the data falls into, e.g. 'breath'.
   :param intervals: A list of intervals (tuples containing a start time and end time).
   :param values: An optional list of values associated with each interval.
   :param parameters: Parameters used to derive the data.
   :param derived_from: Traceback of intermediates from which the current data was derived.
   :param description: Extended human readible description of the data.
   :param default_partial_inclusion: Whether to include a trimmed version of an interval when selecting data


   .. py:attribute:: label
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: unit
      :type:  str | None


   .. py:attribute:: category
      :type:  str


   .. py:attribute:: intervals
      :type:  list[Interval | tuple[float, float]]


   .. py:attribute:: values
      :type:  list[Any] | None


   .. py:attribute:: parameters
      :type:  dict[str, Any]


   .. py:attribute:: derived_from
      :type:  list[Any]


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: default_partial_inclusion
      :type:  bool


   .. py:method:: __post_init__() -> None


   .. py:method:: __len__() -> int


   .. py:property:: has_values
      :type: bool

      True if the IntervalData has values, False otherwise.


   .. py:method:: _sliced_copy(start_index: int, end_index: int, newlabel: str) -> typing_extensions.Self

      Slicing method that must be implemented by all subclasses.

      Must return a copy of self object with all attached data within selected
      indices.



   .. py:method:: select_by_time(start_time: float | None = None, end_time: float | None = None, partial_inclusion: bool | None = None, newlabel: str | None = None) -> typing_extensions.Self

      Create a new copy of the object, selecting data between start_time and end_time.

      This function returns a shortened copy of the object, containing data from the specified start_time to end_time.

      If `partial_inclusion` is set to `True`, any intervals that overlap with the start_time or end_time are included
      in the selection, and their times are adjusted to fit within the specified range. If `partial_inclusion` is
      `False`, intervals that overlap the start or end times are excluded from the selection.

      For example:
      - Set `partial_inclusion` to `True` for cases like "set_driving_pressure" where you want to include settings
      that were active before the start_time.
      - Set `partial_inclusion` to `False` for cases like "detected_breaths" where you want to exclude partial data
      that doesn't fully fit within the time range.

      Note that the end_time is always included in the selection if it is present in the original object.

      :param start_time: The earliest time point to include in the copy.
      :param end_time: The latest time point to include in the copy.
      :param partial_inclusion: Whether to include intervals that overlap with the start_time or end_time.
      :param newlabel: A new label for the copied object.



   .. py:method:: _keep_overlapping(interval: Interval, selection_start: float, selection_end: float, keep_partial_overlapping: bool) -> bool
      :staticmethod:


      Helper function for filtering overlapping interval-value pairs.



   .. py:method:: _replace_start_end_time(interval: Interval, selection_start: float, selection_end: float) -> Interval
      :staticmethod:


      Helper function to replace start and end time after filtering interval-value pairs.



   .. py:method:: __add__(other: typing_extensions.Self) -> typing_extensions.Self


   .. py:method:: concatenate(other: T, newlabel: str | None = None) -> T


