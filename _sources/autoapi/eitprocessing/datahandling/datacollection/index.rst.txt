eitprocessing.datahandling.datacollection
=========================================

.. py:module:: eitprocessing.datahandling.datacollection


Attributes
----------

.. autoapisummary::

   eitprocessing.datahandling.datacollection.V_classes
   eitprocessing.datahandling.datacollection.V


Classes
-------

.. autoapisummary::

   eitprocessing.datahandling.datacollection.DataCollection


Module Contents
---------------

.. py:data:: V_classes

.. py:data:: V

.. py:class:: DataCollection(data_type: type[V], *args, **kwargs)

   Bases: :py:obj:`eitprocessing.datahandling.mixins.equality.Equivalence`, :py:obj:`collections.UserDict`, :py:obj:`eitprocessing.datahandling.mixins.slicing.HasTimeIndexer`, :py:obj:`Generic`\ [\ :py:obj:`V`\ ]


   A collection of a single type of data with unique labels.

   A DataCollection functions largely as a dictionary, but requires a data_type argument, which must be one of the data
   containers existing in this package. When adding an item to the collection, the type of the value must match the
   data_type of the collection. Furthermore, the key has to match the attribute 'label' attached to the value.

   The convenience method `add()` adds an item by setting the key to `value.label`.

   :param data_type: the data container stored in this collection.


   .. py:attribute:: data_type
      :type:  type


   .. py:method:: __setitem__(__key: str, __value: V) -> None


   .. py:method:: add(*item: V, overwrite: bool = False) -> None

      Add one or multiple item(s) to the collection using the item label as the key.



   .. py:method:: _check_item(item: V, key: str | None = None, overwrite: bool = False) -> None

      Check whether the item can be added to the collection.

      In order to be added to the collection, the data type of the item has to match the data type set in the
      collection. They key that is used to store the item in the collection has to match the label of the item itself.
      By default, existing keys can not be overridden.

      :param item: Object to be added to the collection.
      :param key: Key of the item. Has to match `item.label`.
      :param overwrite: If False, the key can not already exist in the collection. Set to True to allow overwriting an
      :param existing object in the collection.:

      :raises TypeError: If the type of the item does not match the type set in the collection.
      :raises KeyError: If the key does not match `item.label`, or when the key already exists in de collection and
      :raises overwrite is set to False.:



   .. py:method:: get_loaded_data() -> dict[str, V]

      Return all data that was directly loaded from disk.



   .. py:method:: get_data_derived_from(obj: V) -> dict[str, V]

      Return all data that was derived from a specific source.



   .. py:method:: get_derived_data() -> dict[str, V]

      Return all data that was derived from any source.



   .. py:method:: concatenate(other: typing_extensions.Self) -> typing_extensions.Self

      Concatenate this collection with an equivalent collection.

      Each item of self of concatenated with the item of other with the same key.



   .. py:method:: select_by_time(start_time: float | None, end_time: float | None, start_inclusive: bool = True, end_inclusive: bool = False) -> DataCollection

      Return a DataCollection containing sliced copies of the items.



