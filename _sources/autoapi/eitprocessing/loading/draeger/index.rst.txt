:py:mod:`eitprocessing.loading.draeger`
=======================================

.. py:module:: eitprocessing.loading.draeger


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.loading.draeger._MedibusField



Functions
~~~~~~~~~

.. autoapisummary::

   eitprocessing.loading.draeger.load_from_single_path
   eitprocessing.loading.draeger._convert_medibus_data
   eitprocessing.loading.draeger._read_frame



Attributes
~~~~~~~~~~

.. autoapisummary::

   eitprocessing.loading.draeger._FRAME_SIZE_BYTES
   eitprocessing.loading.draeger.DRAEGER_FRAMERATE
   eitprocessing.loading.draeger.load_draeger_data
   eitprocessing.loading.draeger._medibus_fields


.. py:data:: _FRAME_SIZE_BYTES
   :value: 4358

   

.. py:data:: DRAEGER_FRAMERATE
   :value: 20

   

.. py:data:: load_draeger_data

   

.. py:function:: load_from_single_path(path: pathlib.Path, framerate: float | None = 20, first_frame: int = 0, max_frames: int | None = None) -> tuple[eitprocessing.datacollection.DataCollection, eitprocessing.datacollection.DataCollection, eitprocessing.datacollection.DataCollection]

   Load DrÃ¤ger EIT data from path.


.. py:function:: _convert_medibus_data(medibus_data: numpy.typing.NDArray, time: numpy.typing.NDArray) -> tuple[eitprocessing.datacollection.DataCollection, eitprocessing.datacollection.DataCollection]


.. py:function:: _read_frame(reader: eitprocessing.loading.reader.Reader, index: int, time: numpy.typing.NDArray, pixel_impedance: numpy.typing.NDArray, medibus_data: numpy.typing.NDArray, events: list, phases: list, previous_marker: int | None) -> int

   Read frame by frame data from DRAEGER files.

   This method adds the loaded data to the provided arrays `time` and
   `pixel_impedance` and the provided lists `events` and `phases` when the
   index is non-negative. When the index is negative, no data is saved. In
   any case, the event marker is returned.


.. py:class:: _MedibusField


   Bases: :py:obj:`NamedTuple`

   .. py:attribute:: signal_name
      :type: str

      

   .. py:attribute:: unit
      :type: str

      

   .. py:attribute:: continuous
      :type: bool

      


.. py:data:: _medibus_fields

   

