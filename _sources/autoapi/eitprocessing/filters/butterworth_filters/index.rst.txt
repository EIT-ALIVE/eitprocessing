:py:mod:`eitprocessing.filters.butterworth_filters`
===================================================

.. py:module:: eitprocessing.filters.butterworth_filters


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.filters.butterworth_filters.ButterworthFilter
   eitprocessing.filters.butterworth_filters.SpecifiedButterworthFilter
   eitprocessing.filters.butterworth_filters.LowPassFilter
   eitprocessing.filters.butterworth_filters.HighPassFilter
   eitprocessing.filters.butterworth_filters.BandStopFilter
   eitprocessing.filters.butterworth_filters.BandPassFilter




Attributes
~~~~~~~~~~

.. autoapisummary::

   eitprocessing.filters.butterworth_filters.MIN_ORDER
   eitprocessing.filters.butterworth_filters.MAX_ORDER
   eitprocessing.filters.butterworth_filters.FILTER_TYPES


.. py:data:: MIN_ORDER
   :value: 1

   

.. py:data:: MAX_ORDER
   :value: 10

   

.. py:data:: FILTER_TYPES
   :value: ['lowpass', 'highpass', 'bandpass', 'bandstop']

   

.. py:class:: ButterworthFilter(filter_type: Literal[lowpass, highpass, bandpass, bandstop], cutoff_frequency: float | tuple[float, float], order: int, sample_frequency: float, ignore_max_order: bool = False)


   Bases: :py:obj:`eitprocessing.filters.TimeDomainFilter`

   Butterworth filter for filtering in the time domain.

   Generates a low-pass, high-pass, band-pass or band-stop digital Butterworth filter of order
   `order`.

   ``ButterworthFilter`` is a wrapper of the `scipy.butter()` and `scipy.filtfilt()` functions.

   :param filter_type: The type of filter to create.
   :param cutoff_frequency: Single frequency (lowpass or highpass filter) or tuple containing two
                            frequencies (bandpass and bandstop filters).
   :param order: Filter order.
   :param sample_frequency: Sample frequency of the data to be filtered.
   :param ignore_max_order: Whether to raise an exception if the order is larger than the maximum of
                            10. Defaults to False.

   .. rubric:: Examples

   >>> t = np.arange(0, 100, 0.1)
   >>> signal = np.sin(t) + 0.1 * np.sin(10 * t)
   >>> lowpass_filter = ButterworthFilter('lowpass', 45, 4, 250)
   >>> filtered_signal = lowpass_filter.apply_filter(signal)

   .. py:method:: __eq__(other: ButterworthFilter)

      Return True if other is a ``ButterworthFilter``, and attributes match.


   .. py:method:: apply_filter(input_data: numpy.typing.ArrayLike) -> numpy.ndarray

      Apply the filter to the input data.

      :param input_data: Data to be filtered. If the input data has more than one axis,
                         the filter is applied to the last axis.

      :returns: The filtered output with the same shape as the input data.



.. py:class:: SpecifiedButterworthFilter(cutoff_frequency: float | tuple[float, float], order: int, sample_frequency: float, ignore_max_order: bool = False, **kwargs)


   Bases: :py:obj:`ButterworthFilter`

   Superclass of specified convenience classes based on ``ButterworthFilter``.

   .. py:attribute:: available_in_gui
      :value: False

      


.. py:class:: LowPassFilter(cutoff_frequency: float | tuple[float, float], order: int, sample_frequency: float, ignore_max_order: bool = False, **kwargs)


   Bases: :py:obj:`SpecifiedButterworthFilter`

   Low-pass Butterworth filter for filtering in the time domain.

   ``LowPassFilter`` is a convenience class similar to ``ButterworthFilter``, where the
   `filter_type` is set to "lowpass".

   .. py:attribute:: available_in_gui
      :value: True

      

   .. py:attribute:: filter_type
      :value: 'lowpass'

      


.. py:class:: HighPassFilter(cutoff_frequency: float | tuple[float, float], order: int, sample_frequency: float, ignore_max_order: bool = False, **kwargs)


   Bases: :py:obj:`SpecifiedButterworthFilter`

   High-pass Butterworth filter for filtering in the time domain.

   ``HighPassFilter`` is a convenience class similar to ``ButterworthFilter``, where the
   `filter_type` is set to "highpass".

   .. py:attribute:: available_in_gui
      :value: True

      

   .. py:attribute:: filter_type
      :value: 'highpass'

      


.. py:class:: BandStopFilter(cutoff_frequency: float | tuple[float, float], order: int, sample_frequency: float, ignore_max_order: bool = False, **kwargs)


   Bases: :py:obj:`SpecifiedButterworthFilter`

   Band-stop Butterworth filter for filtering in the time domain.

   ``BandStopFilter`` is a convenience class similar to ``ButterworthFilter``, where the
   `filter_type` is set to "bandstop".

   .. py:attribute:: available_in_gui
      :value: True

      

   .. py:attribute:: filter_type
      :value: 'bandstop'

      


.. py:class:: BandPassFilter(cutoff_frequency: float | tuple[float, float], order: int, sample_frequency: float, ignore_max_order: bool = False, **kwargs)


   Bases: :py:obj:`SpecifiedButterworthFilter`

   Band-pass Butterworth filter for filtering in the time domain.

   ``BandPassFilter`` is a convenience class similar to ``ButterworthFilter``, where the
   `filter_type` is set to "bandpass".

   .. py:attribute:: available_in_gui
      :value: True

      

   .. py:attribute:: filter_type
      :value: 'bandpass'

      


