:py:mod:`eitprocessing.roi_selection.gridselection`
===================================================

.. py:module:: eitprocessing.roi_selection.gridselection


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eitprocessing.roi_selection.gridselection.GridSelection
   eitprocessing.roi_selection.gridselection.VentralAndDorsal
   eitprocessing.roi_selection.gridselection.RightAndLeft
   eitprocessing.roi_selection.gridselection.FourLayers
   eitprocessing.roi_selection.gridselection.Quadrants




.. py:class:: GridSelection

   Bases: :py:obj:`eitprocessing.roi_selection.ROISelection`

   Create regions of interest by division into a grid.

   GridSelection allows for the creation a list of 2D arrays that can be used to divide a two- or
   higher-dimensional array into several regions structured in a grid. An instance of
   GridSelection contains information about how to subdivide an input matrix. Calling
   `find_grid(data)`, where data is a 2D array, results in a list of arrays with the same
   dimension as `data`, each representing a single region. Each resulting 2D array contains the
   value 0 for pixels that do not belong to the region, and the value 1 or any number between 0
   and 1 for pixels that (partly) belong to the region.

   Rows and columns at the edges of `data` that only contain NaN (not a number) values are
   ignored. E.g. a (32, 32) array where the first and last two rows and first and last two columns
   only contain NaN are split as if it is a (28, 28) array. The resulting arrays have the shape
   (32, 32) with the same cells as the input data containing NaN values.

   If the number of rows or columns can not split evenly, a row or column can be split among two
   regions. This behaviour is controlled by `split_rows` and `split_columns`.

   If `split_rows` is `False` (default), rows will not be split between two groups. A warning will
   be shown stating regions don't contain equal numbers of rows. The regions towards the top will
   be larger. E.g., when a (5, 2) array is split in two vertical regions, the first region will
   contain the first three rows, and the second region the last two rows.

   If `split_rows` is `True`, e.g. a (5, 2) array that is split in two vertical regions, the first
   region will contain the first two rows and half of each pixel of the third row. The second
   region contains half of each pixel in the third row, and the last two rows.

   `split_columns` has the same effect on columns as `split_rows` has on rows.

   Regions are ordered according to C indexing order. The `matrix_layout()` method provides a map
   showing how the regions are ordered.

   Common grids are pre-defined:
   - VentralAndDorsal: vertically divided into ventral and dorsal;
   - RightAndLeft: horizontally divided into anatomical right and left; NB: anatomical right is
   the left side of the matrix;
   - FourLayers: vertically divided into ventral, mid-ventral, mid-dorsal and dorsal;
   - Quadrants: vertically and horizontally divided into four quadrants.

   :param v_split: The number of vertical regions. Must be 1 or larger.
   :param h_split: The number of horizontal regions. Must be 1 or larger.
   :param split_rows: Allows rows to be split over two regions.
   :param split_columns: Allows columns to be split over two regions.

   .. rubric:: Examples

   >>> pixel_map = array([[ 1,  2,  3],
                          [ 4,  5,  6],
                          [ 7,  8,  9],
                          [10, 11, 12],
                          [13, 14, 15],
                          [16, 17, 18]])
   >>> gs = GridSelection(3, 1, split_pixels=False)
   >>> matrices = gs.find_grid(pixel_map)
   >>> matrices[0] * pixel_map
   array([[1, 2, 3],
          [4, 5, 6],
          [0, 0, 0],
          [0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]])
   >>> gs.matrix_layout()
   array([[0],
          [1],
          [2]])
   >>> gs2 = GridSelection(2, 2, split_pixels=True)
   >>> matrices2 = gs.find_grid(pixel_map)
   >>> gs2.matrix_layout()
   array([[0, 1],
          [2, 3]])
   >>> matrices2[2]
   array([[0. , 0. , 0. ],
          [0. , 0. , 0. ],
          [0. , 0. , 0. ],
          [1. , 0.5, 0. ],
          [1. , 0.5, 0. ],
          [1. , 0.5, 0. ]])

   .. py:attribute:: v_split
      :type: int

      

   .. py:attribute:: h_split
      :type: int

      

   .. py:attribute:: split_rows
      :type: bool
      :value: False

      

   .. py:attribute:: split_columns
      :type: bool
      :value: False

      

   .. py:attribute:: ignore_nan_rows
      :type: bool
      :value: True

      

   .. py:attribute:: ignore_nan_columns
      :type: bool
      :value: True

      

   .. py:method:: __post_init__()


   .. py:method:: find_grid(data) -> list[numpy.typing.NDArray]


   .. py:method:: _create_grouping_vector_no_split_pixels(data: numpy.typing.NDArray, horizontal: bool, n_groups: int) -> list[numpy.typing.NDArray]

      Create a grouping vector to split vector into `n` groups not allowing split elements.


   .. py:method:: _create_grouping_vector_split_pixels(matrix: numpy.typing.NDArray, horizontal: bool, n_groups: int) -> list[numpy.typing.NDArray]

      Create a grouping vector to split vector into `n` groups allowing split elements.


   .. py:method:: matrix_layout() -> numpy.typing.NDArray

      Returns an array showing the layout of the matrices returned by `find_grid`.



.. py:exception:: InvalidDivision

   Bases: :py:obj:`Exception`

   Raised when the data can't be divided into regions.


.. py:exception:: InvalidHorizontalDivision

   Bases: :py:obj:`InvalidDivision`

   Raised when the data can't be divided into horizontal regions.


.. py:exception:: InvalidVerticalDivision

   Bases: :py:obj:`InvalidDivision`

   Raised when the data can't be divided into vertical regions.


.. py:exception:: DivisionWarning

   Bases: :py:obj:`Warning`

   Base class for warning categories.


.. py:exception:: UnevenDivision

   Bases: :py:obj:`DivisionWarning`

   Warning for when a grid selection results in groups of uneven size.


.. py:exception:: UnevenHorizontalDivision

   Bases: :py:obj:`UnevenDivision`

   Warning for when a grid selection results in horizontal groups of uneven size.


.. py:exception:: UnevenVerticalDivision

   Bases: :py:obj:`UnevenDivision`

   Warning for when a grid selection results in vertical groups of uneven size.


.. py:exception:: MoreGroupsThanVectors

   Bases: :py:obj:`DivisionWarning`

   Warning for when the groups outnumber the available vectors.


.. py:exception:: MoreVerticalGroupsThanRows

   Bases: :py:obj:`MoreGroupsThanVectors`

   Warning for when the vertical groups outnumber the available rows.


.. py:exception:: MoreHorizontalGroupsThanColumns

   Bases: :py:obj:`MoreGroupsThanVectors`

   Warning for when the horizontal groups outnumber the available rows.


.. py:class:: VentralAndDorsal

   Bases: :py:obj:`GridSelection`

   Split data into a ventral and dorsal region of interest.

   .. py:attribute:: v_split
      :type: Literal[2]

      

   .. py:attribute:: h_split
      :type: Literal[1]

      

   .. py:attribute:: split_rows
      :value: True

      


.. py:class:: RightAndLeft

   Bases: :py:obj:`GridSelection`

   Split data into a right and left region of interest.

   .. py:attribute:: v_split
      :type: Literal[1]

      

   .. py:attribute:: h_split
      :type: Literal[2]

      

   .. py:attribute:: split_columns
      :value: False

      


.. py:class:: FourLayers

   Bases: :py:obj:`GridSelection`

   Split data vertically into four layer regions of interest.

   .. py:attribute:: v_split
      :type: Literal[4]

      

   .. py:attribute:: h_split
      :type: Literal[1]

      

   .. py:attribute:: split_rows
      :value: True

      


.. py:class:: Quadrants

   Bases: :py:obj:`GridSelection`

   Split data into four quadrant regions of interest.

   .. py:attribute:: v_split
      :type: Literal[2]

      

   .. py:attribute:: h_split
      :type: Literal[2]

      

   .. py:attribute:: split_columns
      :value: False

      

   .. py:attribute:: split_rows
      :value: True

      


